# app.py
import streamlit as st
import requests
import pandas as pd
import altair as alt

# --- ƒê·ªäNH NGHƒ®A 5 URL API C·ª¶A B·∫†N ---
API_EDITS_OVER_TIME = "https://api.tinybird.co/v0/pipes/wiki_events_pipe_edit_time.json"
API_BOT_VS_HUMAN = "https://api.tinybird.co/v0/pipes/wiki_events_pipe_bot_human.json"
API_TOP_SERVERS = "https://api.tinybird.co/v0/pipes/wiki_events_pipe_server.json"
API_TOP_USERS = "https://api.tinybird.co/v0/pipes/wiki_events_pipe_users.json"
API_TOP_PAGES = "https://api.tinybird.co/v0/pipes/wiki_events_pipe_pages.json"

st.set_page_config(layout="wide")
st.title("Dashboard Ph√¢n t√≠ch Ch·ªânh s·ª≠a Wikipedia üìä")

# --- H√ÄM T·∫¢I D·ªÆ LI·ªÜU ---
# H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi 5 l·∫ßn, nh∆∞ng ch·ªâ d√πng 1 token
@st.cache_data(ttl=60)
def get_data(api_url):
    try:
        # 1. L·∫•y token b√≠ m·∫≠t t·ª´ Streamlit Secrets
        token = st.secrets["TINYBIRD_TOKEN"]
        
        # 2. T·∫°o headers ƒë·ªÉ x√°c th·ª±c
        headers = {"Authorization": f"Bearer {token}"}
        
        # 3. Th√™m headers v√†o y√™u c·∫ßu GET
        response = requests.get(api_url, headers=headers) 
        response.raise_for_status() # B√°o l·ªói n·∫øu API h·ªèng (403, 404...)
        
        data = response.json().get('data', [])
        df = pd.DataFrame(data)
        if 'hour' in df.columns:
             df['hour'] = pd.to_datetime(df['hour'])
        return df
    
    except KeyError:
        st.error("L·ªói: TINYBIRD_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong Streamlit Secrets.")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

# --- N√∫t l√†m m·ªõi ---
if st.button("L√†m m·ªõi d·ªØ li·ªáu"):
    st.cache_data.clear()
    st.rerun()

# --- B·ªê C·ª§C DASHBOARD ---
col1, col2 = st.columns(2)

# --- C·ªôt 1 ---
with col1:
    st.subheader("üìà Ch·ªânh s·ª≠a theo th·ªùi gian (24h qua)")
    df_time = get_data(API_EDITS_OVER_TIME) # <-- G·ªçi h√†m
    if not df_time.empty:
        chart_time = alt.Chart(df_time).mark_line().encode(
            x=alt.X('hour', title='Gi·ªù'),
            y=alt.Y('total_edits', title='S·ªë l∆∞·ª£ng ch·ªânh s·ª≠a')
        ).properties(height=300)
        st.altair_chart(chart_time, use_container_width=True)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu.")

    st.subheader("üåê Top 10 Ng√¥n ng·ªØ (Server)")
    df_servers = get_data(API_TOP_SERVERS) # <-- G·ªçi h√†m
    if not df_servers.empty:
        st.bar_chart(df_servers.set_index('server_name'))
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu.")

    st.subheader("üìÑ Top 10 Trang ƒë∆∞·ª£c s·ª≠a nhi·ªÅu nh·∫•t")
    df_pages = get_data(API_TOP_PAGES) # <-- G·ªçi h√†m
    if not df_pages.empty:
        st.dataframe(df_pages)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu.")

# --- C·ªôt 2 ---
with col2:
    st.subheader("ü§ñ Bot vs Ng∆∞·ªùi th·∫≠t")
    df_bot_human = get_data(API_BOT_VS_HUMAN) # <-- G·ªçi h√†m
    if not df_bot_human.empty:
        df_bot_human['is_bot_label'] = df_bot_human['is_bot'].map({True: 'Bot', False: 'Ng∆∞·ªùi th·∫≠t'})
        chart_bot_human = alt.Chart(df_bot_human).mark_arc(inner_radius=50).encode(
            theta=alt.Theta(field="total_edits", type="quantitative"),
            color=alt.Color(field="is_bot_label", type="nominal", title="Lo·∫°i"),
            tooltip=['is_bot_label', 'total_edits']
        ).properties(title='Ph√¢n b·ªë Bot vs Ng∆∞·ªùi', height=300)
        st.altair_chart(chart_bot_human, use_container_width=True)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu.")

    st.subheader("üë• Top 10 Ng∆∞·ªùi d√πng/Bot t√≠ch c·ª±c")
    df_users = get_data(API_TOP_USERS) # <-- G·ªçi h√†m
    if not df_users.empty:
        st.dataframe(df_users)
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu.")
